{"version":3,"sources":["shear.js.ts"],"names":[],"mappings":";AA2EA,aA3EA,SAAA,EAAoB,GACV,IAAA,EAAI,SAAS,cAGZ,OADL,EAAA,WAAW,SAAS,MACf,EAAE,yBAAyB,GAGtC,SAAA,EAAe,GAAqB,IAAA,EAAY,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAG,EAAoB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAC/D,IAAC,EAAW,WAAW,OACvB,MAAO,CACM,SAAA,EACC,SAAA,GACC,UAAA,GACS,mBAAA,IAGtB,IAAA,EAAY,OAAO,eACnB,EAAW,EAAW,UACtB,EAAa,EAAW,wBAAwB,OAG5C,EAAA,SAAS,EAAY,GAG1B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAW,IAKvB,GAJe,EAAA,OAAO,SAAU,QAAS,aAC1B,EAAA,OAAO,SAAU,QAAS,iBAGxC,EAAW,SAAS,EAAU,WAAY,CACjC,EAAA,kBAAkB,GAC5B,MAIF,IAAA,EAAgB,EAAU,WAAW,GAAG,aAGpC,EAAA,kBAAkB,GACtB,IAAA,EAAc,EAAU,WAAW,GAAG,aAChC,EAAA,SAAS,EAAc,aAAc,EAAc,WACnD,EAAA,iBACN,IAAA,EAAY,EAAW,UACvB,EAAU,IAAa,EACzB,EAAqB,EAGnB,EAAkB,EAAW,wBAAwB,OACvD,GAAA,EAAkB,GAAc,EAAW,CACrC,IAAA,EAAO,EAAW,GAcjB,IAXG,EAAA,kBAAkB,GAClB,EAAA,gBAIS,EAAA,OAAO,SAAU,OAAQ,aACzB,EAAA,OAAO,SAAU,QAAS,aACnC,EAAA,WAAW,GAAG,WAAW,GAGzB,EAAA,kBACH,EAAW,wBAAwB,OAAS,GAC5B,EAAA,OAAO,SAAU,OAAQ,aAClC,EAAA,qBAGO,EAAA,EAAW,UAI7B,OADG,EAAA,kBACH,CAAE,QAAF,EAAW,SAAX,EAAqB,UAArB,EAAgC,mBAAhC,GAGX,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAe","file":"shear.map","sourceRoot":"../src","sourcesContent":["function createFrag(htmlString: string) {\n    const r = document.createRange();\n    // Chrome 36 以下需要range附加到一个dom后方可调用该方法\n    r.selectNode(document.body);\n    return r.createContextualFragment(htmlString);\n}\n\nfunction shear(targetNode: Element, lineClamp = 2, afterHTML: string = null) {\n    if (!targetNode.childNodes.length)\n        return {\n            isCuted: false,\n            fullHTML: \"\",\n            cutedHTML: \"\",\n            cutedWithAfterHTML: \"\",\n        };\n\n    const selection = window.getSelection();\n    const fullHTML = targetNode.innerHTML;\n    const fullHeight = targetNode.getBoundingClientRect().height;\n\n    // 把选区折叠到目标节点起始处\n    selection.collapse(targetNode, 0);\n\n    // 选N行\n    for (let i = 0; i < lineClamp; i++) {\n        (selection as any).modify(\"extend\", \"right\", \"character\");\n        (selection as any).modify(\"extend\", \"right\", \"lineboundary\");\n        // 如果选区终点已经超出了目标节点，说明N行的内容包含整个目标节点，\n        // 就不再进行行选中\n        if (!targetNode.contains(selection.focusNode)) {\n            selection.selectAllChildren(targetNode);\n            break;\n        }\n    }\n\n    const selectedRange = selection.getRangeAt(0).cloneRange();\n\n    // 将选区设置为未被前一步选中的内容，直接进行删除。\n    selection.selectAllChildren(targetNode);\n    const removeRange = selection.getRangeAt(0).cloneRange();\n    removeRange.setStart(selectedRange.endContainer, selectedRange.endOffset);\n    removeRange.deleteContents();\n    const cutedHTML = targetNode.innerHTML;\n    const isCuted = fullHTML !== cutedHTML;\n    let cutedWithAfterHTML = cutedHTML;\n\n    // 插入afterHTML\n    const truncatedHeight = targetNode.getBoundingClientRect().height;\n    if (truncatedHeight < fullHeight && afterHTML) {\n        const frag = createFrag(afterHTML);\n\n        // 将选区定位到目标元素结尾\n        selection.selectAllChildren(targetNode);\n        selection.collapseToEnd();\n\n        // 进行一次向左再向右的选区移动，使选区移动到文本节点的末尾，\n        // 否则会出现直接插入到根结点内的情况\n        (selection as any).modify(\"extend\", \"left\", \"character\");\n        (selection as any).modify(\"extend\", \"right\", \"character\");\n        selection.getRangeAt(0).insertNode(frag);\n\n        // 从选区向左删除字符，直到目标节点高度恢复到插入afterHTML前为止\n        selection.collapseToStart();\n        while (targetNode.getBoundingClientRect().height > truncatedHeight) {\n            (selection as any).modify(\"extend\", \"left\", \"character\");\n            selection.deleteFromDocument();\n        }\n\n        cutedWithAfterHTML = targetNode.innerHTML;\n    }\n\n    selection.removeAllRanges();\n    return { isCuted, fullHTML, cutedHTML, cutedWithAfterHTML };\n}\n\nexport default shear;\n"]}